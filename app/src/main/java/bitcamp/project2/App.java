/*
 * This source file was generated by the Gradle 'init' task
 */
package bitcamp.project2;


import bitcamp.project2.command.TodoCommand;
import bitcamp.project2.util.Prompt;
import bitcamp.project2.util.Tasks;
import bitcamp.project2.vo.Todo;
import java.util.List;

import static bitcamp.project2.util.Tasks.*;

public class App {

    static String[] menus = new String[]{"리스트 추가", "리스트 조회", "리스트 편집", "체크 하기"};

//    static TodoCommand todoCommand = new TodoCommand();

    public static void main(String[] args) {
        todoCommand.loadDummyData();
        new App().execute();
    }

    void execute() {
        printPendingTasks();
        printMenu();

        String command;
        while (true) {
            try {
                command = Prompt.input(">> ");
                int menuNo = Integer.parseInt(command);
                String menuTitle = getMenuTitle(menuNo, menus);
                if (menuTitle == null) {
                    System.out.println("유효한 메뉴 번호를 입력해주세요.");
                } else {
                    if (menuTitle.equals("종료")) {
                        System.out.println("종료");
                        break;
                    } else {
                        processMenu(menuTitle);
                    }
                }
            } catch (NumberFormatException e) {
                System.out.println("숫자로 메뉴 번호를 입력해주세요.");
            }
        }
    }

    void processMenu(String menuTitle) {
        switch (menuTitle) {
            case "리스트 추가":
                todoCommand.addTask();
                printMenu();
                break;
            case "리스트 조회":
                todoCommand.viewTask();
                printMenu();
                break;
            case "리스트 편집":
                todoCommand.updateTask();
                printMenu();
                break;
            case "체크 하기":
                todoCommand.taskCheck();
                printMenu();
                break;
            default:
                System.out.printf("%s 메뉴의 명령을 처리할 수 없습니다.\n", menuTitle);
        }

    }

    void printMenu() {
        System.out.println();
        for (int i = 0; i < menus.length; i++) {
            System.out.printf("%d.%s\t\t", (i + 1), menus[i]);
        }
        System.out.println("0.종료");
    }

    boolean isValidateMenu(int menuNo, String[] menus) {
        return menuNo >= 1 && menuNo <= menus.length;
    }

    String getMenuTitle(int menuNo, String[] menus) {
        if (menuNo == 0) {
            return "종료";
        }
        return isValidateMenu(menuNo, menus) ? menus[menuNo - 1] : null;
    }
}
